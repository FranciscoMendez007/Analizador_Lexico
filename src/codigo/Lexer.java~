/* The following code was generated by JFlex 1.4.3 on 10/04/20 09:44 PM */

package codigo;
import java.io.*;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/04/20 09:44 PM from the specification file
 * <tt>C:/Users/kevin/Documents/NetBeansProjects/Analizador_Lexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\6\2\0\1\1\22\0\1\1\1\53\1\11\2\0"+
    "\1\61\1\51\1\0\1\2\1\3\1\5\1\57\1\1\1\4\1\67"+
    "\1\60\12\7\1\0\1\66\1\55\1\56\1\54\2\0\1\42\2\10"+
    "\1\40\1\37\1\27\1\10\1\35\1\50\2\10\1\43\1\44\4\10"+
    "\1\47\1\46\2\10\1\26\4\10\1\64\1\0\1\65\1\70\2\0"+
    "\1\21\1\34\1\22\1\32\1\25\1\12\1\41\1\33\1\13\1\45"+
    "\1\10\1\23\1\14\1\31\1\16\1\15\1\10\1\17\1\24\1\20"+
    "\1\30\1\36\4\10\1\62\1\52\1\63\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\24\10\3\12\2\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\1\14\1\27\1\7\22\30\1\31\17\30"+
    "\1\12\1\13\1\2\1\32\1\0\16\30\1\33\7\30"+
    "\1\34\1\35\1\30\1\36\5\30\1\37\5\30\1\7"+
    "\1\30\1\40\5\30\1\41\2\30\1\42\1\30\1\43"+
    "\3\30\1\44\2\30\1\45\1\46\5\30\1\47\5\30"+
    "\1\50\6\30\1\51\11\30\1\52\3\30\1\53\5\30"+
    "\1\54\1\55\1\56\1\57\1\60\13\30\1\61\3\30"+
    "\1\62\1\30\1\63\5\30\1\64\1\30\1\65\1\30"+
    "\1\66\1\30\1\67\3\30\1\70\1\71\1\72\1\73"+
    "\6\30\1\74\3\30\1\75\1\76\1\77\1\100\1\101"+
    "\3\30\1\102\4\30\1\103\1\104\2\30\1\105\2\30"+
    "\1\106\1\107\4\30\1\110\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\71\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u06ae\0\u0759\0\u0792\0\u011d\0\71"+
    "\0\71\0\71\0\71\0\71\0\u07cb\0\71\0\u0804\0\71"+
    "\0\71\0\u083d\0\u0876\0\71\0\u018f\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\71\0\71\0\u0fcf"+
    "\0\u07cb\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u018f\0\u1560\0\u018f\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u018f\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\71"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u018f"+
    "\0\u1962\0\u199b\0\u018f\0\u19d4\0\u018f\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u018f\0\u1ab8\0\u1af1\0\u018f\0\u018f\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u018f\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u018f\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u018f"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u018f\0\u20bb\0\u20f4\0\u212d\0\u018f\0\u2166\0\u219f"+
    "\0\u21d8\0\u2211\0\u224a\0\u018f\0\u018f\0\u018f\0\u018f\0\u018f"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u018f\0\u24f6\0\u252f\0\u2568\0\u018f"+
    "\0\u25a1\0\u018f\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u018f"+
    "\0\u26f7\0\u018f\0\u2730\0\u018f\0\u2769\0\u018f\0\u27a2\0\u27db"+
    "\0\u2814\0\u018f\0\u018f\0\u018f\0\u018f\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u018f"+
    "\0\u018f\0\u018f\0\u018f\0\u018f\0\u2a87\0\u2ac0\0\u2af9\0\u018f"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u018f\0\u018f\0\u2c16\0\u2c4f"+
    "\0\u018f\0\u2c88\0\u2cc1\0\u018f\0\u018f\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u018f\0\u018f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\11\1\26"+
    "\1\11\1\27\1\30\1\31\1\32\1\11\1\33\1\34"+
    "\3\11\1\35\2\11\1\36\2\11\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\72\0\1\3\4\0"+
    "\1\3\66\0\1\57\70\0\1\60\51\0\1\61\70\0"+
    "\1\61\21\0\1\10\1\62\1\0\37\62\16\0\1\63"+
    "\1\0\6\64\1\0\2\65\1\64\37\65\26\64\1\0"+
    "\2\65\1\64\7\65\1\66\1\65\1\67\25\65\26\64"+
    "\1\0\2\65\1\64\2\65\1\70\34\65\26\64\1\0"+
    "\2\65\1\64\1\65\1\71\2\65\1\72\32\65\26\64"+
    "\1\0\2\65\1\64\1\65\1\73\3\65\1\74\1\65"+
    "\1\75\27\65\26\64\1\0\2\65\1\64\13\65\1\76"+
    "\23\65\26\64\1\0\2\65\1\64\5\65\1\77\5\65"+
    "\1\100\23\65\26\64\1\0\2\65\1\64\11\65\1\101"+
    "\25\65\26\64\1\0\2\65\1\64\1\65\1\102\5\65"+
    "\1\103\1\65\1\104\25\65\26\64\1\0\2\65\1\64"+
    "\13\65\1\105\23\65\26\64\1\0\2\65\1\64\1\65"+
    "\1\106\5\65\1\107\27\65\26\64\1\0\2\65\1\64"+
    "\5\65\1\110\11\65\1\111\17\65\26\64\1\0\2\65"+
    "\1\64\16\65\1\112\20\65\26\64\1\0\2\65\1\64"+
    "\16\65\1\113\20\65\26\64\1\0\2\65\1\64\4\65"+
    "\1\114\2\65\1\115\3\65\1\116\23\65\26\64\1\0"+
    "\2\65\1\64\7\65\1\117\27\65\26\64\1\0\2\65"+
    "\1\64\1\65\1\120\5\65\1\121\27\65\26\64\1\0"+
    "\2\65\1\64\13\65\1\122\23\65\26\64\1\0\2\65"+
    "\1\64\12\65\1\123\24\65\26\64\1\0\2\65\1\64"+
    "\13\65\1\124\23\65\26\64\1\0\2\65\1\64\25\65"+
    "\1\125\11\65\20\64\51\0\1\126\71\0\1\126\74\0"+
    "\1\127\66\0\1\127\1\0\1\127\67\0\2\127\70\0"+
    "\1\61\1\60\67\0\1\61\1\0\1\130\17\0\1\131"+
    "\70\0\1\132\71\0\1\62\1\0\37\62\27\0\1\63"+
    "\61\0\6\64\1\0\2\65\1\64\11\65\1\133\25\65"+
    "\26\64\1\0\2\65\1\64\4\65\1\134\32\65\26\64"+
    "\1\0\2\65\1\64\3\65\1\135\33\65\26\64\1\0"+
    "\2\65\1\64\13\65\1\136\23\65\26\64\1\0\2\65"+
    "\1\64\12\65\1\137\24\65\26\64\1\0\2\65\1\64"+
    "\17\65\1\140\17\65\26\64\1\0\2\65\1\64\13\65"+
    "\1\141\23\65\26\64\1\0\2\65\1\64\5\65\1\142"+
    "\31\65\26\64\1\0\2\65\1\64\6\65\1\143\30\65"+
    "\26\64\1\0\2\65\1\64\16\65\1\144\20\65\26\64"+
    "\1\0\2\65\1\64\5\65\1\145\31\65\26\64\1\0"+
    "\2\65\1\64\6\65\1\146\30\65\26\64\1\0\2\65"+
    "\1\64\10\65\1\147\26\65\26\64\1\0\2\65\1\64"+
    "\2\65\1\150\2\65\1\151\4\65\1\152\5\65\1\153"+
    "\16\65\26\64\1\0\2\65\1\64\7\65\1\154\27\65"+
    "\26\64\1\0\2\65\1\64\13\65\1\155\23\65\26\64"+
    "\1\0\2\65\1\64\17\65\1\156\17\65\26\64\1\0"+
    "\2\65\1\64\11\65\1\157\25\65\26\64\1\0\2\65"+
    "\1\64\5\65\1\160\31\65\26\64\1\0\2\65\1\64"+
    "\6\65\1\161\30\65\26\64\1\0\2\65\1\64\17\65"+
    "\1\162\17\65\26\64\1\0\2\65\1\64\11\65\1\163"+
    "\25\65\26\64\1\0\2\65\1\64\22\65\1\164\14\65"+
    "\26\64\1\0\2\65\1\64\15\65\1\165\5\65\1\166"+
    "\13\65\26\64\1\0\2\65\1\64\12\65\1\167\24\65"+
    "\26\64\1\0\2\65\1\64\10\65\1\170\1\65\1\171"+
    "\24\65\26\64\1\0\2\65\1\64\6\65\1\172\30\65"+
    "\26\64\1\0\2\65\1\64\33\65\1\173\3\65\26\64"+
    "\1\0\2\65\1\64\5\65\1\174\31\65\26\64\1\0"+
    "\2\65\1\64\10\65\1\175\26\65\26\64\1\0\2\65"+
    "\1\64\10\65\1\176\26\65\26\64\1\0\2\65\1\64"+
    "\35\65\1\177\1\65\20\64\6\130\1\0\62\130\3\0"+
    "\1\200\3\0\1\132\61\0\6\64\1\0\2\65\1\64"+
    "\12\65\1\201\24\65\26\64\1\0\2\65\1\64\6\65"+
    "\1\202\30\65\26\64\1\0\2\65\1\64\4\65\1\203"+
    "\32\65\26\64\1\0\2\65\1\64\17\65\1\204\17\65"+
    "\26\64\1\0\2\65\1\64\6\65\1\205\30\65\26\64"+
    "\1\0\2\65\1\64\32\65\1\206\4\65\26\64\1\0"+
    "\2\65\1\64\3\65\1\207\33\65\26\64\1\0\2\65"+
    "\1\64\7\65\1\210\27\65\26\64\1\0\2\65\1\64"+
    "\4\65\1\211\1\212\31\65\26\64\1\0\2\65\1\64"+
    "\13\65\1\213\23\65\26\64\1\0\2\65\1\64\2\65"+
    "\1\214\34\65\26\64\1\0\2\65\1\64\4\65\1\215"+
    "\32\65\26\64\1\0\2\65\1\64\11\65\1\216\25\65"+
    "\26\64\1\0\2\65\1\64\22\65\1\217\14\65\26\64"+
    "\1\0\2\65\1\64\7\65\1\220\27\65\26\64\1\0"+
    "\2\65\1\64\4\65\1\221\32\65\26\64\1\0\2\65"+
    "\1\64\13\65\1\222\23\65\26\64\1\0\2\65\1\64"+
    "\12\65\1\223\24\65\26\64\1\0\2\65\1\64\5\65"+
    "\1\224\31\65\26\64\1\0\2\65\1\64\4\65\1\225"+
    "\32\65\26\64\1\0\2\65\1\64\1\65\1\226\35\65"+
    "\26\64\1\0\2\65\1\64\4\65\1\227\32\65\26\64"+
    "\1\0\2\65\1\64\4\65\1\230\1\231\5\65\1\232"+
    "\23\65\26\64\1\0\2\65\1\64\4\65\1\233\32\65"+
    "\26\64\1\0\2\65\1\64\13\65\1\234\23\65\26\64"+
    "\1\0\2\65\1\64\4\65\1\235\32\65\26\64\1\0"+
    "\2\65\1\64\20\65\1\236\16\65\26\64\1\0\2\65"+
    "\1\64\13\65\1\237\23\65\26\64\1\0\2\65\1\64"+
    "\6\65\1\240\30\65\26\64\1\0\2\65\1\64\4\65"+
    "\1\241\32\65\26\64\1\0\2\65\1\64\20\65\1\242"+
    "\16\65\26\64\1\0\2\65\1\64\26\65\1\243\1\65"+
    "\1\244\6\65\26\64\1\0\2\65\1\64\26\65\1\245"+
    "\1\65\1\246\6\65\26\64\1\0\2\65\1\64\36\65"+
    "\1\247\26\64\1\0\2\65\1\64\4\65\1\250\6\65"+
    "\1\213\23\65\26\64\1\0\2\65\1\64\7\65\1\251"+
    "\27\65\26\64\1\0\2\65\1\64\5\65\1\252\31\65"+
    "\26\64\1\0\2\65\1\64\6\65\1\253\30\65\26\64"+
    "\1\0\2\65\1\64\5\65\1\254\31\65\26\64\1\0"+
    "\2\65\1\64\4\65\1\255\32\65\26\64\1\0\2\65"+
    "\1\64\14\65\1\256\22\65\26\64\1\0\2\65\1\64"+
    "\5\65\1\257\31\65\26\64\1\0\2\65\1\64\7\65"+
    "\1\260\27\65\26\64\1\0\2\65\1\64\1\65\1\261"+
    "\35\65\26\64\1\0\2\65\1\64\4\65\1\262\32\65"+
    "\26\64\1\0\2\65\1\64\1\65\1\263\35\65\26\64"+
    "\1\0\2\65\1\64\10\65\1\264\26\65\26\64\1\0"+
    "\2\65\1\64\17\65\1\265\17\65\26\64\1\0\2\65"+
    "\1\64\13\65\1\266\23\65\26\64\1\0\2\65\1\64"+
    "\20\65\1\267\16\65\26\64\1\0\2\65\1\64\5\65"+
    "\1\270\31\65\26\64\1\0\2\65\1\64\17\65\1\271"+
    "\17\65\26\64\1\0\2\65\1\64\7\65\1\272\27\65"+
    "\26\64\1\0\2\65\1\64\5\65\1\273\31\65\26\64"+
    "\1\0\2\65\1\64\10\65\1\274\26\65\26\64\1\0"+
    "\2\65\1\64\5\65\1\275\31\65\26\64\1\0\2\65"+
    "\1\64\13\65\1\276\23\65\26\64\1\0\2\65\1\64"+
    "\5\65\1\277\31\65\26\64\1\0\2\65\1\64\7\65"+
    "\1\300\27\65\26\64\1\0\2\65\1\64\7\65\1\301"+
    "\27\65\26\64\1\0\2\65\1\64\1\65\1\302\35\65"+
    "\26\64\1\0\2\65\1\64\17\65\1\303\17\65\26\64"+
    "\1\0\2\65\1\64\1\65\1\304\35\65\26\64\1\0"+
    "\2\65\1\64\17\65\1\305\17\65\26\64\1\0\2\65"+
    "\1\64\30\65\1\306\6\65\26\64\1\0\2\65\1\64"+
    "\17\65\1\307\17\65\26\64\1\0\2\65\1\64\6\65"+
    "\1\310\30\65\26\64\1\0\2\65\1\64\5\65\1\311"+
    "\31\65\26\64\1\0\2\65\1\64\7\65\1\312\27\65"+
    "\26\64\1\0\2\65\1\64\20\65\1\313\16\65\26\64"+
    "\1\0\2\65\1\64\7\65\1\314\27\65\26\64\1\0"+
    "\2\65\1\64\17\65\1\315\17\65\26\64\1\0\2\65"+
    "\1\64\12\65\1\316\24\65\26\64\1\0\2\65\1\64"+
    "\17\65\1\317\17\65\26\64\1\0\2\65\1\64\4\65"+
    "\1\320\32\65\26\64\1\0\2\65\1\64\6\65\1\321"+
    "\30\65\26\64\1\0\2\65\1\64\7\65\1\322\27\65"+
    "\26\64\1\0\2\65\1\64\7\65\1\323\27\65\26\64"+
    "\1\0\2\65\1\64\14\65\1\324\1\325\21\65\26\64"+
    "\1\0\2\65\1\64\10\65\1\326\26\65\26\64\1\0"+
    "\2\65\1\64\20\65\1\327\16\65\26\64\1\0\2\65"+
    "\1\64\4\65\1\330\32\65\26\64\1\0\2\65\1\64"+
    "\20\65\1\331\16\65\26\64\1\0\2\65\1\64\27\65"+
    "\1\332\7\65\26\64\1\0\2\65\1\64\7\65\1\333"+
    "\27\65\26\64\1\0\2\65\1\64\27\65\1\334\7\65"+
    "\26\64\1\0\2\65\1\64\7\65\1\335\27\65\26\64"+
    "\1\0\2\65\1\64\31\65\1\336\5\65\26\64\1\0"+
    "\2\65\1\64\6\65\1\337\30\65\26\64\1\0\2\65"+
    "\1\64\7\65\1\340\27\65\26\64\1\0\2\65\1\64"+
    "\7\65\1\341\27\65\26\64\1\0\2\65\1\64\5\65"+
    "\1\342\31\65\26\64\1\0\2\65\1\64\4\65\1\343"+
    "\32\65\26\64\1\0\2\65\1\64\4\65\1\344\32\65"+
    "\26\64\1\0\2\65\1\64\4\65\1\345\32\65\26\64"+
    "\1\0\2\65\1\64\7\65\1\346\27\65\26\64\1\0"+
    "\2\65\1\64\13\65\1\347\23\65\26\64\1\0\2\65"+
    "\1\64\32\65\1\350\4\65\26\64\1\0\2\65\1\64"+
    "\13\65\1\351\23\65\26\64\1\0\2\65\1\64\7\65"+
    "\1\352\27\65\26\64\1\0\2\65\1\64\13\65\1\353"+
    "\23\65\26\64\1\0\2\65\1\64\7\65\1\354\27\65"+
    "\26\64\1\0\2\65\1\64\13\65\1\355\23\65\26\64"+
    "\1\0\2\65\1\64\11\65\1\356\25\65\26\64\1\0"+
    "\2\65\1\64\11\65\1\357\25\65\26\64\1\0\2\65"+
    "\1\64\13\65\1\360\23\65\26\64\1\0\2\65\1\64"+
    "\5\65\1\361\31\65\26\64\1\0\2\65\1\64\12\65"+
    "\1\362\24\65\26\64\1\0\2\65\1\64\5\65\1\363"+
    "\31\65\26\64\1\0\2\65\1\64\5\65\1\364\31\65"+
    "\26\64\1\0\2\65\1\64\4\65\1\365\32\65\26\64"+
    "\1\0\2\65\1\64\5\65\1\366\31\65\26\64\1\0"+
    "\2\65\1\64\11\65\1\367\25\65\26\64\1\0\2\65"+
    "\1\64\12\65\1\370\24\65\26\64\1\0\2\65\1\64"+
    "\32\65\1\371\4\65\26\64\1\0\2\65\1\64\5\65"+
    "\1\372\31\65\26\64\1\0\2\65\1\64\4\65\1\373"+
    "\32\65\26\64\1\0\2\65\1\64\4\65\1\374\32\65"+
    "\26\64\1\0\2\65\1\64\20\65\1\375\16\65\26\64"+
    "\1\0\2\65\1\64\20\65\1\376\16\65\26\64\1\0"+
    "\2\65\1\64\12\65\1\377\24\65\26\64\1\0\2\65"+
    "\1\64\4\65\1\u0100\32\65\26\64\1\0\2\65\1\64"+
    "\4\65\1\u0101\32\65\26\64\1\0\2\65\1\64\27\65"+
    "\1\u0102\7\65\26\64\1\0\2\65\1\64\27\65\1\u0103"+
    "\7\65\26\64\1\0\2\65\1\64\4\65\1\u0104\32\65"+
    "\26\64\1\0\2\65\1\64\20\65\1\u0105\16\65\26\64"+
    "\1\0\2\65\1\64\1\65\1\u0106\35\65\26\64\1\0"+
    "\2\65\1\64\1\65\1\u0107\35\65\26\64\1\0\2\65"+
    "\1\64\10\65\1\u0108\26\65\26\64\1\0\2\65\1\64"+
    "\10\65\1\u0109\26\65\26\64\1\0\2\65\1\64\7\65"+
    "\1\u010a\27\65\26\64\1\0\2\65\1\64\7\65\1\u010b"+
    "\27\65\20\64";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11742];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\1\11\35\1\5\11"+
    "\1\1\1\11\1\0\2\11\2\1\1\11\41\1\2\11"+
    "\2\1\1\0\45\1\1\11\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { linea = yyline; lexeme=yytext(); return nulo;
          }
        case 74: break;
        case 22: 
          { linea = yyline; lexeme=yytext(); return Op_incremento;
          }
        case 75: break;
        case 58: 
          { linea = yyline; lexeme=yytext(); return retorno;
          }
        case 76: break;
        case 29: 
          { linea = yyline; lexeme=yytext(); return fun;
          }
        case 77: break;
        case 11: 
          { linea = yyline; lexeme=yytext(); return Op_relacional;
          }
        case 78: break;
        case 17: 
          { linea = yyline; lexeme=yytext(); return Corchete_a;
          }
        case 79: break;
        case 45: 
          { linea = yyline; lexeme=yytext(); return daHor;
          }
        case 80: break;
        case 57: 
          { linea = yyline; lexeme=yytext(); return pinModo;
          }
        case 81: break;
        case 30: 
          { linea = yyline; lexeme=yytext(); return dob;
          }
        case 82: break;
        case 73: 
          { clinea = yyline; lexeme=yytext(); return LecAnalogica;
          }
        case 83: break;
        case 8: 
          { linea = yyline; lexeme=yytext(); return identificador;
          }
        case 84: break;
        case 69: 
          { linea = yyline; lexeme=yytext(); return verdadero;
          }
        case 85: break;
        case 15: 
          { linea = yyline; lexeme=yytext(); return Llave_a;
          }
        case 86: break;
        case 4: 
          { linea = yyline; lexeme=yytext(); return Parentesis_c;
          }
        case 87: break;
        case 33: 
          { linea = yyline; lexeme=yytext(); return para;
          }
        case 88: break;
        case 53: 
          { linea = yyline; lexeme=yytext(); return EscDig;
          }
        case 89: break;
        case 2: 
          { /*Ignore*/
          }
        case 90: break;
        case 12: 
          { linea = yyline; lexeme=yytext(); return Op_atribucion;
          }
        case 91: break;
        case 5: 
          { linea = yyline; lexeme=yytext(); return resta;
          }
        case 92: break;
        case 28: 
          { linea = yyline; lexeme=yytext(); return ent;
          }
        case 93: break;
        case 67: 
          { linea = yyline; lexeme=yytext(); return salidaMod;
          }
        case 94: break;
        case 64: 
          { linea = yyline; lexeme=yytext(); return terminar;
          }
        case 95: break;
        case 13: 
          { linea = yyline; lexeme=yytext(); return suma;
          }
        case 96: break;
        case 63: 
          { linea = yyline; lexeme=yytext(); return mientras;
          }
        case 97: break;
        case 36: 
          { linea = yyline; lexeme=yytext(); return caso;
          }
        case 98: break;
        case 31: 
          { linea = yyline; lexeme=yytext(); return bit;
          }
        case 99: break;
        case 26: 
          { linea = yyline+1; lexeme=yytext(); return ERRORD;
          }
        case 100: break;
        case 32: 
          { linea = yyline; lexeme=yytext(); return flot;
          }
        case 101: break;
        case 24: 
          { return ERROR;
          }
        case 102: break;
        case 68: 
          { linea = yyline; lexeme=yytext(); return errorVerd;
          }
        case 103: break;
        case 19: 
          { linea = yyline; lexeme=yytext(); return punto_y_coma;
          }
        case 104: break;
        case 48: 
          { linea = yyline; lexeme=yytext(); return hasta;
          }
        case 105: break;
        case 43: 
          { linea = yyline; lexeme=yytext(); return clase;
          }
        case 106: break;
        case 3: 
          { linea = yyline; lexeme=yytext(); return Parentesis_a;
          }
        case 107: break;
        case 9: 
          { linea = yyline; lexeme=yytext(); return Comillas;
          }
        case 108: break;
        case 72: 
          { linea = yyline; lexeme=yytext(); return EscAnalogica;
          }
        case 109: break;
        case 20: 
          { linea = yyline; lexeme=yytext(); return punto;
          }
        case 110: break;
        case 34: 
          { linea = yyline; lexeme=yytext(); return Op_booleano;
          }
        case 111: break;
        case 23: 
          { linea = yyline+1; lexeme=yytext(); return ERRORI;
          }
        case 112: break;
        case 14: 
          { linea = yyline; lexeme=yytext(); return division;
          }
        case 113: break;
        case 55: 
          { linea = yyline; lexeme=yytext(); return SERIAL;
          }
        case 114: break;
        case 51: 
          { linea = yyline; lexeme=yytext(); return cadena;
          }
        case 115: break;
        case 7: 
          { linea = yyline; lexeme=yytext(); return numero;
          }
        case 116: break;
        case 10: 
          { linea = yyline; lexeme=yytext(); return Op_logico;
          }
        case 117: break;
        case 61: 
          { linea = yyline; lexeme=yytext(); return flotante;
          }
        case 118: break;
        case 50: 
          { linea = yyline; lexeme=yytext(); return cambio;
          }
        case 119: break;
        case 38: 
          { linea = yyline; lexeme=yytext(); return sino;
          }
        case 120: break;
        case 41: 
          { linea = yyline; lexeme=yytext(); return falso;
          }
        case 121: break;
        case 37: 
          { linea = yyline; lexeme=yytext(); return leer;
          }
        case 122: break;
        case 42: 
          { linea = yyline; lexeme=yytext(); return ciclo;
          }
        case 123: break;
        case 47: 
          { linea = yyline; lexeme=yytext(); return hacer;
          }
        case 124: break;
        case 18: 
          { linea = yyline; lexeme=yytext(); return Corchete_c;
          }
        case 125: break;
        case 65: 
          { linea = yyline; lexeme=yytext(); return caracter;
          }
        case 126: break;
        case 56: 
          { linea = yyline; lexeme=yytext(); return mostrar;
          }
        case 127: break;
        case 21: 
          { linea = yyline; lexeme=yytext(); return potencia;
          }
        case 128: break;
        case 44: 
          { linea = yyline; lexeme=yytext(); return daFec;
          }
        case 129: break;
        case 40: 
          { linea = yyline; lexeme=yytext(); return bajo;
          }
        case 130: break;
        case 6: 
          { linea = yyline; lexeme=yytext(); return multiplicacion;
          }
        case 131: break;
        case 49: 
          { linea = yyline; lexeme=yytext(); return prepVa;
          }
        case 132: break;
        case 52: 
          { linea = yyline; lexeme=yytext(); return entero;
          }
        case 133: break;
        case 16: 
          { linea = yyline; lexeme=yytext(); return Llave_c;
          }
        case 134: break;
        case 1: 
          { linea = yyline+1; lexeme=yytext(); return ERROR;
          }
        case 135: break;
        case 54: 
          { linea = yyline; lexeme=yytext(); return LecDig;
          }
        case 136: break;
        case 59: 
          { linea = yyline; lexeme=yytext(); return retraso;
          }
        case 137: break;
        case 70: 
          { linea = yyline; lexeme=yytext(); return errorFalso;
          }
        case 138: break;
        case 46: 
          { linea = yyline; lexeme=yytext(); return desde;
          }
        case 139: break;
        case 25: 
          { linea = yyline; lexeme=yytext(); return si;
          }
        case 140: break;
        case 27: 
          { linea = yyline; lexeme=yytext(); return car;
          }
        case 141: break;
        case 60: 
          { linea = yyline; lexeme=yytext(); return entrada;
          }
        case 142: break;
        case 71: 
          { linea = yyline; lexeme=yytext(); return entradaMod;
          }
        case 143: break;
        case 35: 
          { linea = yyline; lexeme=yytext(); return alto;
          }
        case 144: break;
        case 66: 
          { linea = yyline; lexeme=yytext(); return entonces;
          }
        case 145: break;
        case 62: 
          { linea = yyline; lexeme=yytext(); return importar;
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
